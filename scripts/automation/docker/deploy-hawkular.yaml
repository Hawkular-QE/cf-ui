--- 
- 
  hosts: 
    - OpenShiftServers
  remote_user: root

  vars:
    OC: "/usr/bin/oc"
    HAWKULAR_ROUTE_FILE: "./hawkular-route.txt"

  tasks:
    - block:
      - name: Set Facts
        set_fact:
          HAWKULAR_APP: "{{hawkular_app}}"
          HAWKULAR_USERNAME: "{{hawkular_username}}"
          HAWKULAR_PASSWORD: "{{hawkukar_password}}"
          HAWKULAR_IMAGE: "{{hawkular_image}}"
          OS_URL: "{{os_url}}"
          OS_USERNAME: "{{os_username}}"
          OS_PASSWORD: "{{os_password}}"
          OS_PROJECT: "{{os_project}}"

    - block:
      - name: Check HAWKULAR_IMAGE
        shell: "echo {{HAWKULAR_IMAGE}}"
        register: echo
        failed_when: (echo.stdout|length == 0)
      - name: Check OS_URL
        shell: "echo {{OS_URL}}"
        register: echo
        failed_when: (echo.stdout|length == 0)
      - name: Check OS_USERNAME
        shell: "echo {{OS_USERNAME}}"
        failed_when: (echo.stdout|length == 0)
      - name: Check OS_PASSWORD
        shell: "echo {{OS_PASSWORD}}"
        failed_when: (echo.stdout|length == 0)
      - name: Check OS_PROJECT
        shell: "echo {{OS_PROJECT}}"
        failed_when: (echo.stdout|length == 0)

    - block:
      - name: Check 'oc' version is v3.5
        shell: "{{OC}} version"
        register: version
        failed_when: "('v3.5' not in version.stdout)"

    - block:
      - name: Login to "{{OS_URL}}"
        shell: "{{OC}} login {{OS_URL}} -u={{OS_USERNAME}} -p={{OS_PASSWORD}} --insecure-skip-tls-verify"
        register: oc_login
        failed_when: "('Using project' not in oc_login.stdout)"
      
    - block:
      - name: Detete Project "{{OS_PROJECT}}"
        shell: "{{OC}} delete project {{OS_PROJECT}}"
        register: result
        failed_when: (result.stderr.find("Error from server") == -1) and (result.stdout.find("deleted") == -1)

    - block:
      - name: Wait for Project "{{OS_PROJECT}}" to be deleted
        shell: "{{OC}} get project {{OS_PROJECT}}"
        register: get_project
        failed_when: (get_project.stderr.find("Error from server") == -1) and (get_project.stdout.find("Terminating") == -1)
        until: ("Error from server" in get_project.stderr)
        retries: 100
        delay: 3

    - block:
      - name: Create New Project "{{OS_PROJECT}}"
        shell: "{{OC}} new-project {{OS_PROJECT}}"
        register: new_project
        failed_when: (new_project.stdout.find("Now using project") == -1) and (new_project.stdout.find("Already on project") == -1)

    - block:
      - name: Deploy App "{{HAWKULAR_APP}}"
        shell: '{{OC}} process -f {{HAWKULAR_APP}} -p HAWKULAR_SERVICES_IMAGE={{HAWKULAR_IMAGE}} -p HAWKULAR_USER={{HAWKULAR_USERNAME}} -p HAWKULAR_PASSWORD={{HAWKULAR_PASSWORD}} | {{OC}} create -f -'

    - block:
      - name: Wait for deploy complete
        shell: "{{OC}} get pods"
        register: get_pods
        until: ("hawkular-services-1-deploy" not in get_pods.stdout)
        retries: 100
        delay: 2

      - name: Verify App is in state "Running"
        shell: "{{OC}} get pods | grep hawkular-services |  awk '{print $3}'"
        failed_when: "('Running' not in get_pods.stdout)"

    - block:
      - name: Get Route
        shell: "{{OC}} get routes | grep {{OS_PROJECT}} | awk '{print $2}'"
        register: get_route
        failed_when: get_route.stdout == ""
      - name: Writing Route "{{get_route.stdout}}" to file "{{HAWKULAR_ROUTE_FILE}}"
        copy: content="{{get_route.stdout}}" dest={{HAWKULAR_ROUTE_FILE}}


